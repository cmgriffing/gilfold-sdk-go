# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.10
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class AccountStatsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total': 'float',
        'daily': 'list[AccountStatsResponseDailyInner]',
        'monthly': 'list[AccountStatsResponseDailyInner]'
    }

    attribute_map = {
        'total': 'total',
        'daily': 'daily',
        'monthly': 'monthly'
    }

    def __init__(self, total=None, daily=None, monthly=None, local_vars_configuration=None):  # noqa: E501
        """AccountStatsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._total = None
        self._daily = None
        self._monthly = None
        self.discriminator = None

        self.total = total
        self.daily = daily
        self.monthly = monthly

    @property
    def total(self):
        """Gets the total of this AccountStatsResponse.  # noqa: E501


        :return: The total of this AccountStatsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AccountStatsResponse.


        :param total: The total of this AccountStatsResponse.  # noqa: E501
        :type total: float
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def daily(self):
        """Gets the daily of this AccountStatsResponse.  # noqa: E501


        :return: The daily of this AccountStatsResponse.  # noqa: E501
        :rtype: list[AccountStatsResponseDailyInner]
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this AccountStatsResponse.


        :param daily: The daily of this AccountStatsResponse.  # noqa: E501
        :type daily: list[AccountStatsResponseDailyInner]
        """
        if self.local_vars_configuration.client_side_validation and daily is None:  # noqa: E501
            raise ValueError("Invalid value for `daily`, must not be `None`")  # noqa: E501

        self._daily = daily

    @property
    def monthly(self):
        """Gets the monthly of this AccountStatsResponse.  # noqa: E501


        :return: The monthly of this AccountStatsResponse.  # noqa: E501
        :rtype: list[AccountStatsResponseDailyInner]
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this AccountStatsResponse.


        :param monthly: The monthly of this AccountStatsResponse.  # noqa: E501
        :type monthly: list[AccountStatsResponseDailyInner]
        """
        if self.local_vars_configuration.client_side_validation and monthly is None:  # noqa: E501
            raise ValueError("Invalid value for `monthly`, must not be `None`")  # noqa: E501

        self._monthly = monthly

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountStatsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountStatsResponse):
            return True

        return self.to_dict() != other.to_dict()

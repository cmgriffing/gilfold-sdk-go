# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class BusinessSettingsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'business_id': 'str',
        'currency_label': 'str',
        'currency_label_suffixed': 'bool',
        'accounts_overdraftable': 'bool'
    }

    attribute_map = {
        'business_id': 'businessId',
        'currency_label': 'currencyLabel',
        'currency_label_suffixed': 'currencyLabelSuffixed',
        'accounts_overdraftable': 'accountsOverdraftable'
    }

    def __init__(self, business_id=None, currency_label=None, currency_label_suffixed=None, accounts_overdraftable=None, local_vars_configuration=None):  # noqa: E501
        """BusinessSettingsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._business_id = None
        self._currency_label = None
        self._currency_label_suffixed = None
        self._accounts_overdraftable = None
        self.discriminator = None

        self.business_id = business_id
        self.currency_label = currency_label
        self.currency_label_suffixed = currency_label_suffixed
        self.accounts_overdraftable = accounts_overdraftable

    @property
    def business_id(self):
        """Gets the business_id of this BusinessSettingsResponse.  # noqa: E501


        :return: The business_id of this BusinessSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this BusinessSettingsResponse.


        :param business_id: The business_id of this BusinessSettingsResponse.  # noqa: E501
        :type business_id: str
        """
        if self.local_vars_configuration.client_side_validation and business_id is None:  # noqa: E501
            raise ValueError("Invalid value for `business_id`, must not be `None`")  # noqa: E501

        self._business_id = business_id

    @property
    def currency_label(self):
        """Gets the currency_label of this BusinessSettingsResponse.  # noqa: E501


        :return: The currency_label of this BusinessSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_label

    @currency_label.setter
    def currency_label(self, currency_label):
        """Sets the currency_label of this BusinessSettingsResponse.


        :param currency_label: The currency_label of this BusinessSettingsResponse.  # noqa: E501
        :type currency_label: str
        """
        if self.local_vars_configuration.client_side_validation and currency_label is None:  # noqa: E501
            raise ValueError("Invalid value for `currency_label`, must not be `None`")  # noqa: E501

        self._currency_label = currency_label

    @property
    def currency_label_suffixed(self):
        """Gets the currency_label_suffixed of this BusinessSettingsResponse.  # noqa: E501


        :return: The currency_label_suffixed of this BusinessSettingsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._currency_label_suffixed

    @currency_label_suffixed.setter
    def currency_label_suffixed(self, currency_label_suffixed):
        """Sets the currency_label_suffixed of this BusinessSettingsResponse.


        :param currency_label_suffixed: The currency_label_suffixed of this BusinessSettingsResponse.  # noqa: E501
        :type currency_label_suffixed: bool
        """
        if self.local_vars_configuration.client_side_validation and currency_label_suffixed is None:  # noqa: E501
            raise ValueError("Invalid value for `currency_label_suffixed`, must not be `None`")  # noqa: E501

        self._currency_label_suffixed = currency_label_suffixed

    @property
    def accounts_overdraftable(self):
        """Gets the accounts_overdraftable of this BusinessSettingsResponse.  # noqa: E501


        :return: The accounts_overdraftable of this BusinessSettingsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._accounts_overdraftable

    @accounts_overdraftable.setter
    def accounts_overdraftable(self, accounts_overdraftable):
        """Sets the accounts_overdraftable of this BusinessSettingsResponse.


        :param accounts_overdraftable: The accounts_overdraftable of this BusinessSettingsResponse.  # noqa: E501
        :type accounts_overdraftable: bool
        """
        if self.local_vars_configuration.client_side_validation and accounts_overdraftable is None:  # noqa: E501
            raise ValueError("Invalid value for `accounts_overdraftable`, must not be `None`")  # noqa: E501

        self._accounts_overdraftable = accounts_overdraftable

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessSettingsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BusinessSettingsResponse):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TransactionStatsResponseDailyInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'incoming_amount': 'float',
        'outgoing_amount': 'float',
        'incoming_count': 'float',
        'outgoing_count': 'float'
    }

    attribute_map = {
        'date': 'date',
        'incoming_amount': 'incomingAmount',
        'outgoing_amount': 'outgoingAmount',
        'incoming_count': 'incomingCount',
        'outgoing_count': 'outgoingCount'
    }

    def __init__(self, date=None, incoming_amount=None, outgoing_amount=None, incoming_count=None, outgoing_count=None, local_vars_configuration=None):  # noqa: E501
        """TransactionStatsResponseDailyInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._incoming_amount = None
        self._outgoing_amount = None
        self._incoming_count = None
        self._outgoing_count = None
        self.discriminator = None

        self.date = date
        self.incoming_amount = incoming_amount
        self.outgoing_amount = outgoing_amount
        self.incoming_count = incoming_count
        self.outgoing_count = outgoing_count

    @property
    def date(self):
        """Gets the date of this TransactionStatsResponseDailyInner.  # noqa: E501


        :return: The date of this TransactionStatsResponseDailyInner.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TransactionStatsResponseDailyInner.


        :param date: The date of this TransactionStatsResponseDailyInner.  # noqa: E501
        :type date: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def incoming_amount(self):
        """Gets the incoming_amount of this TransactionStatsResponseDailyInner.  # noqa: E501


        :return: The incoming_amount of this TransactionStatsResponseDailyInner.  # noqa: E501
        :rtype: float
        """
        return self._incoming_amount

    @incoming_amount.setter
    def incoming_amount(self, incoming_amount):
        """Sets the incoming_amount of this TransactionStatsResponseDailyInner.


        :param incoming_amount: The incoming_amount of this TransactionStatsResponseDailyInner.  # noqa: E501
        :type incoming_amount: float
        """
        if self.local_vars_configuration.client_side_validation and incoming_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `incoming_amount`, must not be `None`")  # noqa: E501

        self._incoming_amount = incoming_amount

    @property
    def outgoing_amount(self):
        """Gets the outgoing_amount of this TransactionStatsResponseDailyInner.  # noqa: E501


        :return: The outgoing_amount of this TransactionStatsResponseDailyInner.  # noqa: E501
        :rtype: float
        """
        return self._outgoing_amount

    @outgoing_amount.setter
    def outgoing_amount(self, outgoing_amount):
        """Sets the outgoing_amount of this TransactionStatsResponseDailyInner.


        :param outgoing_amount: The outgoing_amount of this TransactionStatsResponseDailyInner.  # noqa: E501
        :type outgoing_amount: float
        """
        if self.local_vars_configuration.client_side_validation and outgoing_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `outgoing_amount`, must not be `None`")  # noqa: E501

        self._outgoing_amount = outgoing_amount

    @property
    def incoming_count(self):
        """Gets the incoming_count of this TransactionStatsResponseDailyInner.  # noqa: E501


        :return: The incoming_count of this TransactionStatsResponseDailyInner.  # noqa: E501
        :rtype: float
        """
        return self._incoming_count

    @incoming_count.setter
    def incoming_count(self, incoming_count):
        """Sets the incoming_count of this TransactionStatsResponseDailyInner.


        :param incoming_count: The incoming_count of this TransactionStatsResponseDailyInner.  # noqa: E501
        :type incoming_count: float
        """
        if self.local_vars_configuration.client_side_validation and incoming_count is None:  # noqa: E501
            raise ValueError("Invalid value for `incoming_count`, must not be `None`")  # noqa: E501

        self._incoming_count = incoming_count

    @property
    def outgoing_count(self):
        """Gets the outgoing_count of this TransactionStatsResponseDailyInner.  # noqa: E501


        :return: The outgoing_count of this TransactionStatsResponseDailyInner.  # noqa: E501
        :rtype: float
        """
        return self._outgoing_count

    @outgoing_count.setter
    def outgoing_count(self, outgoing_count):
        """Sets the outgoing_count of this TransactionStatsResponseDailyInner.


        :param outgoing_count: The outgoing_count of this TransactionStatsResponseDailyInner.  # noqa: E501
        :type outgoing_count: float
        """
        if self.local_vars_configuration.client_side_validation and outgoing_count is None:  # noqa: E501
            raise ValueError("Invalid value for `outgoing_count`, must not be `None`")  # noqa: E501

        self._outgoing_count = outgoing_count

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionStatsResponseDailyInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionStatsResponseDailyInner):
            return True

        return self.to_dict() != other.to_dict()

=begin
#

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class TransactionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all Transactions for a Business
    # Get all Transactions for a Business
    # @param [Hash] opts the optional parameters
    # @return [AllTransactionsResponse]
    def transactions_get(opts = {})
      data, _status_code, _headers = transactions_get_with_http_info(opts)
      data
    end

    # Get all Transactions for a Business
    # Get all Transactions for a Business
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllTransactionsResponse, Integer, Hash)>] AllTransactionsResponse data, response status code and response headers
    def transactions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_get ...'
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AllTransactionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Transaction for an Business
    # Creates a Transaction for an Business
    # @param post_transaction_request [PostTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponse]
    def transactions_post(post_transaction_request, opts = {})
      data, _status_code, _headers = transactions_post_with_http_info(post_transaction_request, opts)
      data
    end

    # Creates a Transaction for an Business
    # Creates a Transaction for an Business
    # @param post_transaction_request [PostTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponse, Integer, Hash)>] TransactionResponse data, response status code and response headers
    def transactions_post_with_http_info(post_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_post ...'
      end
      # verify the required parameter 'post_transaction_request' is set
      if @api_client.config.client_side_validation && post_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_transaction_request' when calling TransactionsApi.transactions_post"
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get stats for all Transactions
    # Get stats for all Transactions
    # @param [Hash] opts the optional parameters
    # @return [TransactionStatsResponse]
    def transactions_stats_get(opts = {})
      data, _status_code, _headers = transactions_stats_get_with_http_info(opts)
      data
    end

    # Get stats for all Transactions
    # Get stats for all Transactions
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionStatsResponse, Integer, Hash)>] TransactionStatsResponse data, response status code and response headers
    def transactions_stats_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_stats_get ...'
      end
      # resource path
      local_var_path = '/transactions/stats'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionStatsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_stats_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_stats_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Transaction for an Business
    # Delete Transaction for an Business
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def transactions_transaction_id_delete(opts = {})
      data, _status_code, _headers = transactions_transaction_id_delete_with_http_info(opts)
      data
    end

    # Delete Transaction for an Business
    # Delete Transaction for an Business
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def transactions_transaction_id_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_transaction_id_delete ...'
      end
      # resource path
      local_var_path = '/transactions/:transactionId'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_transaction_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_transaction_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Transaction for a Business
    # Get a Transaction for a Business
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponse]
    def transactions_transaction_id_get(opts = {})
      data, _status_code, _headers = transactions_transaction_id_get_with_http_info(opts)
      data
    end

    # Get a Transaction for a Business
    # Get a Transaction for a Business
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponse, Integer, Hash)>] TransactionResponse data, response status code and response headers
    def transactions_transaction_id_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_transaction_id_get ...'
      end
      # resource path
      local_var_path = '/transactions/:transactionId'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_transaction_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_transaction_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Transaction for a Business
    # Update a Transaction for a Business
    # @param patch_transaction_request [PatchTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponse]
    def transactions_transaction_id_patch(patch_transaction_request, opts = {})
      data, _status_code, _headers = transactions_transaction_id_patch_with_http_info(patch_transaction_request, opts)
      data
    end

    # Update a Transaction for a Business
    # Update a Transaction for a Business
    # @param patch_transaction_request [PatchTransactionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponse, Integer, Hash)>] TransactionResponse data, response status code and response headers
    def transactions_transaction_id_patch_with_http_info(patch_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionsApi.transactions_transaction_id_patch ...'
      end
      # verify the required parameter 'patch_transaction_request' is set
      if @api_client.config.client_side_validation && patch_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'patch_transaction_request' when calling TransactionsApi.transactions_transaction_id_patch"
      end
      # resource path
      local_var_path = '/transactions/:transactionId'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'TransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"TransactionsApi.transactions_transaction_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionsApi#transactions_transaction_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

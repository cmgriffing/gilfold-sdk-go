/*


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllTransactionsResponseTransactions struct for AllTransactionsResponseTransactions
type AllTransactionsResponseTransactions struct {
	Items []TransactionResponse `json:"Items"`
	Count float32 `json:"Count"`
	ScannedCount float32 `json:"ScannedCount"`
	LastEvaluatedKey map[string]string `json:"LastEvaluatedKey"`
}

// NewAllTransactionsResponseTransactions instantiates a new AllTransactionsResponseTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllTransactionsResponseTransactions(items []TransactionResponse, count float32, scannedCount float32, lastEvaluatedKey map[string]string) *AllTransactionsResponseTransactions {
	this := AllTransactionsResponseTransactions{}
	this.Items = items
	this.Count = count
	this.ScannedCount = scannedCount
	this.LastEvaluatedKey = lastEvaluatedKey
	return &this
}

// NewAllTransactionsResponseTransactionsWithDefaults instantiates a new AllTransactionsResponseTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllTransactionsResponseTransactionsWithDefaults() *AllTransactionsResponseTransactions {
	this := AllTransactionsResponseTransactions{}
	return &this
}

// GetItems returns the Items field value
func (o *AllTransactionsResponseTransactions) GetItems() []TransactionResponse {
	if o == nil {
		var ret []TransactionResponse
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *AllTransactionsResponseTransactions) GetItemsOk() ([]TransactionResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *AllTransactionsResponseTransactions) SetItems(v []TransactionResponse) {
	o.Items = v
}

// GetCount returns the Count field value
func (o *AllTransactionsResponseTransactions) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AllTransactionsResponseTransactions) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AllTransactionsResponseTransactions) SetCount(v float32) {
	o.Count = v
}

// GetScannedCount returns the ScannedCount field value
func (o *AllTransactionsResponseTransactions) GetScannedCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ScannedCount
}

// GetScannedCountOk returns a tuple with the ScannedCount field value
// and a boolean to check if the value has been set.
func (o *AllTransactionsResponseTransactions) GetScannedCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScannedCount, true
}

// SetScannedCount sets field value
func (o *AllTransactionsResponseTransactions) SetScannedCount(v float32) {
	o.ScannedCount = v
}

// GetLastEvaluatedKey returns the LastEvaluatedKey field value
func (o *AllTransactionsResponseTransactions) GetLastEvaluatedKey() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.LastEvaluatedKey
}

// GetLastEvaluatedKeyOk returns a tuple with the LastEvaluatedKey field value
// and a boolean to check if the value has been set.
func (o *AllTransactionsResponseTransactions) GetLastEvaluatedKeyOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastEvaluatedKey, true
}

// SetLastEvaluatedKey sets field value
func (o *AllTransactionsResponseTransactions) SetLastEvaluatedKey(v map[string]string) {
	o.LastEvaluatedKey = v
}

func (o AllTransactionsResponseTransactions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Items"] = o.Items
	}
	if true {
		toSerialize["Count"] = o.Count
	}
	if true {
		toSerialize["ScannedCount"] = o.ScannedCount
	}
	if true {
		toSerialize["LastEvaluatedKey"] = o.LastEvaluatedKey
	}
	return json.Marshal(toSerialize)
}

type NullableAllTransactionsResponseTransactions struct {
	value *AllTransactionsResponseTransactions
	isSet bool
}

func (v NullableAllTransactionsResponseTransactions) Get() *AllTransactionsResponseTransactions {
	return v.value
}

func (v *NullableAllTransactionsResponseTransactions) Set(val *AllTransactionsResponseTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableAllTransactionsResponseTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableAllTransactionsResponseTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllTransactionsResponseTransactions(val *AllTransactionsResponseTransactions) *NullableAllTransactionsResponseTransactions {
	return &NullableAllTransactionsResponseTransactions{value: val, isSet: true}
}

func (v NullableAllTransactionsResponseTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllTransactionsResponseTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



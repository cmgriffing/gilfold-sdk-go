/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountResponse
 */
export interface AccountResponse {
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponse
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof AccountResponse
     */
    'createdAt': number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponse
     */
    'modifiedAt': number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponse
     */
    'usageBillingRate': number;
}
/**
 * 
 * @export
 * @interface AccountStatsResponse
 */
export interface AccountStatsResponse {
    /**
     * 
     * @type {number}
     * @memberof AccountStatsResponse
     */
    'total': number;
    /**
     * 
     * @type {Array<AccountStatsResponseDailyInner>}
     * @memberof AccountStatsResponse
     */
    'daily': Array<AccountStatsResponseDailyInner>;
    /**
     * 
     * @type {Array<AccountStatsResponseDailyInner>}
     * @memberof AccountStatsResponse
     */
    'monthly': Array<AccountStatsResponseDailyInner>;
}
/**
 * 
 * @export
 * @interface AccountStatsResponseDailyInner
 */
export interface AccountStatsResponseDailyInner {
    /**
     * 
     * @type {string}
     * @memberof AccountStatsResponseDailyInner
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof AccountStatsResponseDailyInner
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface AccountUsageBillingAdjustmentsResponse
 */
export interface AccountUsageBillingAdjustmentsResponse {
    /**
     * 
     * @type {Array<AccountUsageBillingAdjustmentsResponseAdjustmentsInner>}
     * @memberof AccountUsageBillingAdjustmentsResponse
     */
    'adjustments': Array<AccountUsageBillingAdjustmentsResponseAdjustmentsInner>;
}
/**
 * 
 * @export
 * @interface AccountUsageBillingAdjustmentsResponseAdjustmentsInner
 */
export interface AccountUsageBillingAdjustmentsResponseAdjustmentsInner {
    /**
     * 
     * @type {string}
     * @memberof AccountUsageBillingAdjustmentsResponseAdjustmentsInner
     */
    'billingId': string;
    /**
     * 
     * @type {string}
     * @memberof AccountUsageBillingAdjustmentsResponseAdjustmentsInner
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof AccountUsageBillingAdjustmentsResponseAdjustmentsInner
     */
    'hourlyCost': number;
    /**
     * 
     * @type {number}
     * @memberof AccountUsageBillingAdjustmentsResponseAdjustmentsInner
     */
    'createdAt': number;
    /**
     * 
     * @type {number}
     * @memberof AccountUsageBillingAdjustmentsResponseAdjustmentsInner
     */
    'modifiedAt': number;
}
/**
 * 
 * @export
 * @interface AllAccountsResponse
 */
export interface AllAccountsResponse {
    /**
     * 
     * @type {Array<AccountResponse>}
     * @memberof AllAccountsResponse
     */
    'accounts': Array<AccountResponse>;
}
/**
 * 
 * @export
 * @interface AllTransactionsResponse
 */
export interface AllTransactionsResponse {
    /**
     * 
     * @type {Array<TransactionResponse>}
     * @memberof AllTransactionsResponse
     */
    'transactions': Array<TransactionResponse>;
}
/**
 * 
 * @export
 * @interface BusinessResponse
 */
export interface BusinessResponse {
    /**
     * 
     * @type {string}
     * @memberof BusinessResponse
     */
    'businessId': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface BusinessSettingsResponse
 */
export interface BusinessSettingsResponse {
    /**
     * 
     * @type {string}
     * @memberof BusinessSettingsResponse
     */
    'businessId': string;
    /**
     * 
     * @type {string}
     * @memberof BusinessSettingsResponse
     */
    'currencyLabel': string;
    /**
     * 
     * @type {boolean}
     * @memberof BusinessSettingsResponse
     */
    'currencyLabelSuffixed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BusinessSettingsResponse
     */
    'accountsOverdraftable': boolean;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PatchAccountRequest
 */
export interface PatchAccountRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchAccountRequest
     */
    'accountName'?: string;
}
/**
 * 
 * @export
 * @interface PatchBusinessRequest
 */
export interface PatchBusinessRequest {
    /**
     * I am curious to see if this works with markdown like this link: [to google](https://www.google.com)
     * @type {string}
     * @memberof PatchBusinessRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PatchBusinessSettingsRequest
 */
export interface PatchBusinessSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'currencyLabel'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchBusinessSettingsRequest
     */
    'currencyLabelSuffixed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchBusinessSettingsRequest
     */
    'accountsOverdraftable'?: boolean;
    /**
     * 
     * @type {BillingType}
     * @memberof PatchBusinessSettingsRequest
     */
    'billingType'?: BillingType;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchBusinessSettingsRequest
     */
    'paymentProviders'?: Array<PatchBusinessSettingsRequestPaymentProvidersEnum>;
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'stripeSandboxPublishableKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'stripeSandboxSecretKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'stripePublishableKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'stripeSecretKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'paypalClientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchBusinessSettingsRequest
     */
    'paypalClientSecret'?: string;
}

export const PatchBusinessSettingsRequestPaymentProvidersEnum = {
    Paypal: 'paypal',
    Stripe: 'stripe'
} as const;

export type PatchBusinessSettingsRequestPaymentProvidersEnum = typeof PatchBusinessSettingsRequestPaymentProvidersEnum[keyof typeof PatchBusinessSettingsRequestPaymentProvidersEnum];

/**
 * 
 * @export
 * @interface PatchTransactionRequest
 */
export interface PatchTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchTransactionRequest
     */
    'accountId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchTransactionRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchTransactionRequest
     */
    'note'?: string;
    /**
     * 
     * @type {PaymentProvider}
     * @memberof PatchTransactionRequest
     */
    'paymentProvider'?: PaymentProvider;
    /**
     * 
     * @type {string}
     * @memberof PatchTransactionRequest
     */
    'paymentId'?: string;
}
/**
 * 
 * @export
 * @interface PostAccountRequest
 */
export interface PostAccountRequest {
    /**
     * This is your own internal account ID. We will index it based upon your business ID.
     * @type {string}
     * @memberof PostAccountRequest
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof PostAccountRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PostAccountUsageBillingRateAdjustmentRequest
 */
export interface PostAccountUsageBillingRateAdjustmentRequest {
    /**
     * 
     * @type {number}
     * @memberof PostAccountUsageBillingRateAdjustmentRequest
     */
    'billingCost': number;
}
/**
 * 
 * @export
 * @interface PostTransactionRequest
 */
export interface PostTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof PostTransactionRequest
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof PostTransactionRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof PostTransactionRequest
     */
    'note'?: string;
    /**
     * 
     * @type {PaymentProvider}
     * @memberof PostTransactionRequest
     */
    'paymentProvider'?: PaymentProvider;
    /**
     * 
     * @type {string}
     * @memberof PostTransactionRequest
     */
    'paymentId'?: string;
}
/**
 * 
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'transactionId': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'businessId': string;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponse
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'paymentProvider'?: TransactionResponsePaymentProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponse
     */
    'paymentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponse
     */
    'createdAt': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponse
     */
    'modifiedAt': number;
}

export const TransactionResponsePaymentProviderEnum = {
    Stripe: 'stripe'
} as const;

export type TransactionResponsePaymentProviderEnum = typeof TransactionResponsePaymentProviderEnum[keyof typeof TransactionResponsePaymentProviderEnum];

/**
 * 
 * @export
 * @interface TransactionStatsResponse
 */
export interface TransactionStatsResponse {
    /**
     * 
     * @type {number}
     * @memberof TransactionStatsResponse
     */
    'total': number;
    /**
     * 
     * @type {Array<TransactionStatsResponseDailyInner>}
     * @memberof TransactionStatsResponse
     */
    'daily': Array<TransactionStatsResponseDailyInner>;
    /**
     * 
     * @type {Array<TransactionStatsResponseDailyInner>}
     * @memberof TransactionStatsResponse
     */
    'monthly': Array<TransactionStatsResponseDailyInner>;
}
/**
 * 
 * @export
 * @interface TransactionStatsResponseDailyInner
 */
export interface TransactionStatsResponseDailyInner {
    /**
     * 
     * @type {string}
     * @memberof TransactionStatsResponseDailyInner
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof TransactionStatsResponseDailyInner
     */
    'incomingAmount': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionStatsResponseDailyInner
     */
    'outgoingAmount': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionStatsResponseDailyInner
     */
    'incomingCount': number;
    /**
     * 
     * @type {number}
     * @memberof TransactionStatsResponseDailyInner
     */
    'outgoingCount': number;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete an Account of a Business
         * @summary Delete an Account of a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/:accountId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an account for a Business
         * @summary Get an account for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/:accountId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Account for Business
         * @summary Update Account for Business
         * @param {PatchAccountRequest} patchAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdPatch: async (patchAccountRequest: PatchAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patchAccountRequest' is not null or undefined
            assertParamExists('accountsAccountIdPatch', 'patchAccountRequest', patchAccountRequest)
            const localVarPath = `/accounts/:accountId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Transactions for an Account
         * @summary Get Transactions for an Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdTransactionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/:accountId/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Accounts for a Business
         * @summary Get all Accounts for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Account for a Business
         * @summary Create an Account for a Business
         * @param {PostAccountRequest} postAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPost: async (postAccountRequest: PostAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postAccountRequest' is not null or undefined
            assertParamExists('accountsPost', 'postAccountRequest', postAccountRequest)
            const localVarPath = `/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stats for all accounts
         * @summary Get stats for all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsStatsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete an Account of a Business
         * @summary Delete an Account of a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an account for a Business
         * @summary Get an account for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Account for Business
         * @summary Update Account for Business
         * @param {PatchAccountRequest} patchAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdPatch(patchAccountRequest: PatchAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdPatch(patchAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Transactions for an Account
         * @summary Get Transactions for an Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdTransactionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdTransactionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Accounts for a Business
         * @summary Get all Accounts for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Account for a Business
         * @summary Create an Account for a Business
         * @param {PostAccountRequest} postAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPost(postAccountRequest: PostAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPost(postAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get stats for all accounts
         * @summary Get stats for all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsStatsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsStatsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Delete an Account of a Business
         * @summary Delete an Account of a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdDelete(options?: any): AxiosPromise<object> {
            return localVarFp.accountsAccountIdDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Get an account for a Business
         * @summary Get an account for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdGet(options?: any): AxiosPromise<AccountResponse> {
            return localVarFp.accountsAccountIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update Account for Business
         * @summary Update Account for Business
         * @param {PatchAccountRequest} patchAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdPatch(patchAccountRequest: PatchAccountRequest, options?: any): AxiosPromise<AccountResponse> {
            return localVarFp.accountsAccountIdPatch(patchAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Transactions for an Account
         * @summary Get Transactions for an Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdTransactionsGet(options?: any): AxiosPromise<AllTransactionsResponse> {
            return localVarFp.accountsAccountIdTransactionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Accounts for a Business
         * @summary Get all Accounts for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(options?: any): AxiosPromise<AllAccountsResponse> {
            return localVarFp.accountsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Account for a Business
         * @summary Create an Account for a Business
         * @param {PostAccountRequest} postAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPost(postAccountRequest: PostAccountRequest, options?: any): AxiosPromise<AccountResponse> {
            return localVarFp.accountsPost(postAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get stats for all accounts
         * @summary Get stats for all accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsStatsGet(options?: any): AxiosPromise<AccountStatsResponse> {
            return localVarFp.accountsStatsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Delete an Account of a Business
     * @summary Delete an Account of a Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAccountIdDelete(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAccountIdDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an account for a Business
     * @summary Get an account for a Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAccountIdGet(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAccountIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Account for Business
     * @summary Update Account for Business
     * @param {PatchAccountRequest} patchAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAccountIdPatch(patchAccountRequest: PatchAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAccountIdPatch(patchAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Transactions for an Account
     * @summary Get Transactions for an Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsAccountIdTransactionsGet(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsAccountIdTransactionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Accounts for a Business
     * @summary Get all Accounts for a Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsGet(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Account for a Business
     * @summary Create an Account for a Business
     * @param {PostAccountRequest} postAccountRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsPost(postAccountRequest: PostAccountRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsPost(postAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get stats for all accounts
     * @summary Get stats for all accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsStatsGet(options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountsStatsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BusinessesApi - axios parameter creator
 * @export
 */
export const BusinessesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Settings for a business
         * @summary Get Settings for a business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        businessBusinessIdSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business/:businessId/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Use this to get the name and other business details. Here is a link: [to google](https://google.com). Let\'s see if it works. 
         * @summary Get Business Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        businessesBusinessIdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/businesses/:businessId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Business Details
         * @summary Update Business Details
         * @param {PatchBusinessRequest} patchBusinessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        businessesBusinessIdPatch: async (patchBusinessRequest: PatchBusinessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patchBusinessRequest' is not null or undefined
            assertParamExists('businessesBusinessIdPatch', 'patchBusinessRequest', patchBusinessRequest)
            const localVarPath = `/businesses/:businessId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchBusinessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessesApi - functional programming interface
 * @export
 */
export const BusinessesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Settings for a business
         * @summary Get Settings for a business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async businessBusinessIdSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.businessBusinessIdSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Use this to get the name and other business details. Here is a link: [to google](https://google.com). Let\'s see if it works. 
         * @summary Get Business Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async businessesBusinessIdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.businessesBusinessIdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Business Details
         * @summary Update Business Details
         * @param {PatchBusinessRequest} patchBusinessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async businessesBusinessIdPatch(patchBusinessRequest: PatchBusinessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.businessesBusinessIdPatch(patchBusinessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessesApi - factory interface
 * @export
 */
export const BusinessesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessesApiFp(configuration)
    return {
        /**
         * Get Settings for a business
         * @summary Get Settings for a business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        businessBusinessIdSettingsGet(options?: any): AxiosPromise<BusinessSettingsResponse> {
            return localVarFp.businessBusinessIdSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         *  Use this to get the name and other business details. Here is a link: [to google](https://google.com). Let\'s see if it works. 
         * @summary Get Business Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        businessesBusinessIdGet(options?: any): AxiosPromise<BusinessResponse> {
            return localVarFp.businessesBusinessIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update Business Details
         * @summary Update Business Details
         * @param {PatchBusinessRequest} patchBusinessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        businessesBusinessIdPatch(patchBusinessRequest: PatchBusinessRequest, options?: any): AxiosPromise<BusinessResponse> {
            return localVarFp.businessesBusinessIdPatch(patchBusinessRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessesApi - object-oriented interface
 * @export
 * @class BusinessesApi
 * @extends {BaseAPI}
 */
export class BusinessesApi extends BaseAPI {
    /**
     * Get Settings for a business
     * @summary Get Settings for a business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApi
     */
    public businessBusinessIdSettingsGet(options?: AxiosRequestConfig) {
        return BusinessesApiFp(this.configuration).businessBusinessIdSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Use this to get the name and other business details. Here is a link: [to google](https://google.com). Let\'s see if it works. 
     * @summary Get Business Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApi
     */
    public businessesBusinessIdGet(options?: AxiosRequestConfig) {
        return BusinessesApiFp(this.configuration).businessesBusinessIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Business Details
     * @summary Update Business Details
     * @param {PatchBusinessRequest} patchBusinessRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApi
     */
    public businessesBusinessIdPatch(patchBusinessRequest: PatchBusinessRequest, options?: AxiosRequestConfig) {
        return BusinessesApiFp(this.configuration).businessesBusinessIdPatch(patchBusinessRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all Transactions for a Business
         * @summary Get all Transactions for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Transaction for an Business
         * @summary Creates a Transaction for an Business
         * @param {PostTransactionRequest} postTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsPost: async (postTransactionRequest: PostTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTransactionRequest' is not null or undefined
            assertParamExists('transactionsPost', 'postTransactionRequest', postTransactionRequest)
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get stats for all Transactions
         * @summary Get stats for all Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsStatsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Transaction for an Business
         * @summary Delete Transaction for an Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIdDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/:transactionId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Transaction for a Business
         * @summary Get a Transaction for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/:transactionId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Transaction for a Business
         * @summary Update a Transaction for a Business
         * @param {PatchTransactionRequest} patchTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIdPatch: async (patchTransactionRequest: PatchTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patchTransactionRequest' is not null or undefined
            assertParamExists('transactionsTransactionIdPatch', 'patchTransactionRequest', patchTransactionRequest)
            const localVarPath = `/transactions/:transactionId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all Transactions for a Business
         * @summary Get all Transactions for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Transaction for an Business
         * @summary Creates a Transaction for an Business
         * @param {PostTransactionRequest} postTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsPost(postTransactionRequest: PostTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsPost(postTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get stats for all Transactions
         * @summary Get stats for all Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsStatsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsStatsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete Transaction for an Business
         * @summary Delete Transaction for an Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsTransactionIdDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsTransactionIdDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Transaction for a Business
         * @summary Get a Transaction for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsTransactionIdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsTransactionIdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Transaction for a Business
         * @summary Update a Transaction for a Business
         * @param {PatchTransactionRequest} patchTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsTransactionIdPatch(patchTransactionRequest: PatchTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsTransactionIdPatch(patchTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Get all Transactions for a Business
         * @summary Get all Transactions for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(options?: any): AxiosPromise<AllTransactionsResponse> {
            return localVarFp.transactionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Transaction for an Business
         * @summary Creates a Transaction for an Business
         * @param {PostTransactionRequest} postTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsPost(postTransactionRequest: PostTransactionRequest, options?: any): AxiosPromise<TransactionResponse> {
            return localVarFp.transactionsPost(postTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get stats for all Transactions
         * @summary Get stats for all Transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsStatsGet(options?: any): AxiosPromise<TransactionStatsResponse> {
            return localVarFp.transactionsStatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Transaction for an Business
         * @summary Delete Transaction for an Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIdDelete(options?: any): AxiosPromise<object> {
            return localVarFp.transactionsTransactionIdDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Transaction for a Business
         * @summary Get a Transaction for a Business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIdGet(options?: any): AxiosPromise<TransactionResponse> {
            return localVarFp.transactionsTransactionIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Transaction for a Business
         * @summary Update a Transaction for a Business
         * @param {PatchTransactionRequest} patchTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIdPatch(patchTransactionRequest: PatchTransactionRequest, options?: any): AxiosPromise<TransactionResponse> {
            return localVarFp.transactionsTransactionIdPatch(patchTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * Get all Transactions for a Business
     * @summary Get all Transactions for a Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsGet(options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Transaction for an Business
     * @summary Creates a Transaction for an Business
     * @param {PostTransactionRequest} postTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsPost(postTransactionRequest: PostTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsPost(postTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get stats for all Transactions
     * @summary Get stats for all Transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsStatsGet(options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsStatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Transaction for an Business
     * @summary Delete Transaction for an Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIdDelete(options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIdDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Transaction for a Business
     * @summary Get a Transaction for a Business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIdGet(options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Transaction for a Business
     * @summary Update a Transaction for a Business
     * @param {PatchTransactionRequest} patchTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIdPatch(patchTransactionRequest: PatchTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIdPatch(patchTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsageApi - axios parameter creator
 * @export
 */
export const UsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an Account\'s current Usage Billing Rate Adjustments
         * @summary Get an Account\'s current Usage Billing Rate Adjustments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdUsageGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/:accountId/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an Account\'s Usage Billing Rate
         * @summary Set an Account\'s Usage Billing Rate
         * @param {PostAccountUsageBillingRateAdjustmentRequest} postAccountUsageBillingRateAdjustmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdUsagePost: async (postAccountUsageBillingRateAdjustmentRequest: PostAccountUsageBillingRateAdjustmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postAccountUsageBillingRateAdjustmentRequest' is not null or undefined
            assertParamExists('accountsAccountIdUsagePost', 'postAccountUsageBillingRateAdjustmentRequest', postAccountUsageBillingRateAdjustmentRequest)
            const localVarPath = `/accounts/:accountId/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAccountUsageBillingRateAdjustmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageApi - functional programming interface
 * @export
 */
export const UsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an Account\'s current Usage Billing Rate Adjustments
         * @summary Get an Account\'s current Usage Billing Rate Adjustments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdUsageGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUsageBillingAdjustmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdUsageGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set an Account\'s Usage Billing Rate
         * @summary Set an Account\'s Usage Billing Rate
         * @param {PostAccountUsageBillingRateAdjustmentRequest} postAccountUsageBillingRateAdjustmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdUsagePost(postAccountUsageBillingRateAdjustmentRequest: PostAccountUsageBillingRateAdjustmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdUsagePost(postAccountUsageBillingRateAdjustmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsageApi - factory interface
 * @export
 */
export const UsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageApiFp(configuration)
    return {
        /**
         * Get an Account\'s current Usage Billing Rate Adjustments
         * @summary Get an Account\'s current Usage Billing Rate Adjustments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdUsageGet(options?: any): AxiosPromise<AccountUsageBillingAdjustmentsResponse> {
            return localVarFp.accountsAccountIdUsageGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Set an Account\'s Usage Billing Rate
         * @summary Set an Account\'s Usage Billing Rate
         * @param {PostAccountUsageBillingRateAdjustmentRequest} postAccountUsageBillingRateAdjustmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdUsagePost(postAccountUsageBillingRateAdjustmentRequest: PostAccountUsageBillingRateAdjustmentRequest, options?: any): AxiosPromise<object> {
            return localVarFp.accountsAccountIdUsagePost(postAccountUsageBillingRateAdjustmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export class UsageApi extends BaseAPI {
    /**
     * Get an Account\'s current Usage Billing Rate Adjustments
     * @summary Get an Account\'s current Usage Billing Rate Adjustments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public accountsAccountIdUsageGet(options?: AxiosRequestConfig) {
        return UsageApiFp(this.configuration).accountsAccountIdUsageGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an Account\'s Usage Billing Rate
     * @summary Set an Account\'s Usage Billing Rate
     * @param {PostAccountUsageBillingRateAdjustmentRequest} postAccountUsageBillingRateAdjustmentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public accountsAccountIdUsagePost(postAccountUsageBillingRateAdjustmentRequest: PostAccountUsageBillingRateAdjustmentRequest, options?: AxiosRequestConfig) {
        return UsageApiFp(this.configuration).accountsAccountIdUsagePost(postAccountUsageBillingRateAdjustmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


